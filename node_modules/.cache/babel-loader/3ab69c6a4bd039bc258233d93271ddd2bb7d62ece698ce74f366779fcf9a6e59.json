{"ast":null,"code":"import MockAdapter from 'axios-mock-adapter';\nimport { api } from './api';\nlet documents = [{\n  id: '1',\n  name: 'discharge_summary.pdf',\n  type: 'application/pdf',\n  size: 245760,\n  uploadDate: '2024-09-20T10:30:00Z',\n  status: 'processed'\n}];\nlet chatHistory = [{\n  id: '1',\n  type: 'user',\n  content: 'What medications were prescribed?',\n  timestamp: '2024-09-20T11:00:00Z'\n}, {\n  id: '2',\n  type: 'system',\n  content: 'Based on the discharge summary, the following medications were prescribed: Lisinopril 10mg daily, Atorvastatin 20mg nightly.',\n  timestamp: '2024-09-20T11:00:15Z',\n  sources: ['discharge_summary.pdf - Page 2']\n}];\nlet nextDocId = 2;\nlet nextMsgId = 3;\nconst mock = new MockAdapter(api, {\n  delayResponse: 500\n});\n\n// --- DOCUMENTS ---\nmock.onPost('/api/documents/upload').reply(() => {\n  const newDoc = {\n    id: String(nextDocId++),\n    name: `document_${nextDocId - 1}.pdf`,\n    type: 'application/pdf',\n    size: 180000,\n    uploadDate: new Date().toISOString(),\n    status: 'processed'\n  };\n  documents.push(newDoc);\n  return [200, newDoc];\n});\nmock.onGet('/api/documents').reply(() => {\n  return [200, documents];\n});\nmock.onDelete(/\\/api\\/documents\\/\\d+/).reply(config => {\n  const id = config.url.split('/').pop();\n  documents = documents.filter(d => d.id !== id);\n  return [204];\n});\nmock.onPost('/api/chat/message').reply(config => {\n  const {\n    message\n  } = JSON.parse(config.data);\n  const lower = message.toLowerCase();\n  let content = \"I've analyzed your documents. \";\n  const sources = [];\n  if (lower.includes('medication') || lower.includes('prescribed')) {\n    content += 'Based on the discharge summary, the following medications were prescribed: Lisinopril 10mg daily, Atorvastatin 20mg nightly.';\n    sources.push('discharge_summary.pdf - Page 2');\n  } else if (lower.includes('diagnosis')) {\n    content += 'The primary diagnosis was Type 2 Diabetes Mellitus with peripheral neuropathy.';\n    sources.push('discharge_summary.pdf - Page 1');\n  } else if (lower.includes('allerg')) {\n    content += 'No known drug allergies were documented.';\n    sources.push('discharge_summary.pdf - Page 1');\n  } else if (lower.includes('lab') || lower.includes('result')) {\n    content += 'Recent lab results: HbA1c 7.2%, LDL 110 mg/dL.';\n    sources.push('discharge_summary.pdf - Page 3');\n  } else if (lower.includes('treatment') || lower.includes('plan')) {\n    content += 'Treatment plan: medication management, diabetic diet, follow-up in 2 weeks.';\n    sources.push('discharge_summary.pdf - Page 2');\n  } else {\n    content += 'Please ask about medications, diagnosis, labs, or treatment plan.';\n    sources.push('discharge_summary.pdf - Multiple pages');\n  }\n  const userMessage = {\n    id: String(nextMsgId++),\n    type: 'user',\n    content: message,\n    timestamp: new Date().toISOString()\n  };\n  const systemMessage = {\n    id: String(nextMsgId++),\n    type: 'system',\n    content,\n    timestamp: new Date().toISOString(),\n    sources\n  };\n  chatHistory.push(userMessage, systemMessage);\n  return [200, systemMessage];\n});\nmock.onGet('/api/chat/history').reply(() => {\n  return [200, chatHistory];\n});\nexport default mock;","map":{"version":3,"names":["MockAdapter","api","documents","id","name","type","size","uploadDate","status","chatHistory","content","timestamp","sources","nextDocId","nextMsgId","mock","delayResponse","onPost","reply","newDoc","String","Date","toISOString","push","onGet","onDelete","config","url","split","pop","filter","d","message","JSON","parse","data","lower","toLowerCase","includes","userMessage","systemMessage"],"sources":["/Users/gavinappi-fy/healthcare-chat-frontend/src/services/apiMock.js"],"sourcesContent":["import MockAdapter from 'axios-mock-adapter';\nimport { api } from './api';\n\nlet documents = [\n  {\n    id: '1',\n    name: 'discharge_summary.pdf',\n    type: 'application/pdf',\n    size: 245760,\n    uploadDate: '2024-09-20T10:30:00Z',\n    status: 'processed',\n  },\n];\n\nlet chatHistory = [\n  {\n    id: '1',\n    type: 'user',\n    content: 'What medications were prescribed?',\n    timestamp: '2024-09-20T11:00:00Z',\n  },\n  {\n    id: '2',\n    type: 'system',\n    content:\n      'Based on the discharge summary, the following medications were prescribed: Lisinopril 10mg daily, Atorvastatin 20mg nightly.',\n    timestamp: '2024-09-20T11:00:15Z',\n    sources: ['discharge_summary.pdf - Page 2'],\n  },\n];\n\nlet nextDocId = 2;\nlet nextMsgId = 3;\n\nconst mock = new MockAdapter(api, { delayResponse: 500 });\n\n// --- DOCUMENTS ---\nmock.onPost('/api/documents/upload').reply(() => {\n  const newDoc = {\n    id: String(nextDocId++),\n    name: `document_${nextDocId - 1}.pdf`,\n    type: 'application/pdf',\n    size: 180000,\n    uploadDate: new Date().toISOString(),\n    status: 'processed',\n  };\n  documents.push(newDoc);\n  return [200, newDoc];\n});\n\nmock.onGet('/api/documents').reply(() => {\n  return [200, documents];\n});\n\nmock.onDelete(/\\/api\\/documents\\/\\d+/).reply((config) => {\n  const id = config.url.split('/').pop();\n  documents = documents.filter((d) => d.id !== id);\n  return [204];\n});\n\n\nmock.onPost('/api/chat/message').reply((config) => {\n  const { message } = JSON.parse(config.data);\n  const lower = message.toLowerCase();\n\n  let content = \"I've analyzed your documents. \";\n  const sources = [];\n\n  if (lower.includes('medication') || lower.includes('prescribed')) {\n    content +=\n      'Based on the discharge summary, the following medications were prescribed: Lisinopril 10mg daily, Atorvastatin 20mg nightly.';\n    sources.push('discharge_summary.pdf - Page 2');\n  } else if (lower.includes('diagnosis')) {\n    content += 'The primary diagnosis was Type 2 Diabetes Mellitus with peripheral neuropathy.';\n    sources.push('discharge_summary.pdf - Page 1');\n  } else if (lower.includes('allerg')) {\n    content += 'No known drug allergies were documented.';\n    sources.push('discharge_summary.pdf - Page 1');\n  } else if (lower.includes('lab') || lower.includes('result')) {\n    content += 'Recent lab results: HbA1c 7.2%, LDL 110 mg/dL.';\n    sources.push('discharge_summary.pdf - Page 3');\n  } else if (lower.includes('treatment') || lower.includes('plan')) {\n    content += 'Treatment plan: medication management, diabetic diet, follow-up in 2 weeks.';\n    sources.push('discharge_summary.pdf - Page 2');\n  } else {\n    content += 'Please ask about medications, diagnosis, labs, or treatment plan.';\n    sources.push('discharge_summary.pdf - Multiple pages');\n  }\n\n  const userMessage = {\n    id: String(nextMsgId++),\n    type: 'user',\n    content: message,\n    timestamp: new Date().toISOString(),\n  };\n\n  const systemMessage = {\n    id: String(nextMsgId++),\n    type: 'system',\n    content,\n    timestamp: new Date().toISOString(),\n    sources,\n  };\n\n  chatHistory.push(userMessage, systemMessage);\n\n  return [200, systemMessage];\n});\n\nmock.onGet('/api/chat/history').reply(() => {\n  return [200, chatHistory];\n});\n\nexport default mock;\n"],"mappings":"AAAA,OAAOA,WAAW,MAAM,oBAAoB;AAC5C,SAASC,GAAG,QAAQ,OAAO;AAE3B,IAAIC,SAAS,GAAG,CACd;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,uBAAuB;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE,sBAAsB;EAClCC,MAAM,EAAE;AACV,CAAC,CACF;AAED,IAAIC,WAAW,GAAG,CAChB;EACEN,EAAE,EAAE,GAAG;EACPE,IAAI,EAAE,MAAM;EACZK,OAAO,EAAE,mCAAmC;EAC5CC,SAAS,EAAE;AACb,CAAC,EACD;EACER,EAAE,EAAE,GAAG;EACPE,IAAI,EAAE,QAAQ;EACdK,OAAO,EACL,8HAA8H;EAChIC,SAAS,EAAE,sBAAsB;EACjCC,OAAO,EAAE,CAAC,gCAAgC;AAC5C,CAAC,CACF;AAED,IAAIC,SAAS,GAAG,CAAC;AACjB,IAAIC,SAAS,GAAG,CAAC;AAEjB,MAAMC,IAAI,GAAG,IAAIf,WAAW,CAACC,GAAG,EAAE;EAAEe,aAAa,EAAE;AAAI,CAAC,CAAC;;AAEzD;AACAD,IAAI,CAACE,MAAM,CAAC,uBAAuB,CAAC,CAACC,KAAK,CAAC,MAAM;EAC/C,MAAMC,MAAM,GAAG;IACbhB,EAAE,EAAEiB,MAAM,CAACP,SAAS,EAAE,CAAC;IACvBT,IAAI,EAAE,YAAYS,SAAS,GAAG,CAAC,MAAM;IACrCR,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE,IAAIc,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACpCd,MAAM,EAAE;EACV,CAAC;EACDN,SAAS,CAACqB,IAAI,CAACJ,MAAM,CAAC;EACtB,OAAO,CAAC,GAAG,EAAEA,MAAM,CAAC;AACtB,CAAC,CAAC;AAEFJ,IAAI,CAACS,KAAK,CAAC,gBAAgB,CAAC,CAACN,KAAK,CAAC,MAAM;EACvC,OAAO,CAAC,GAAG,EAAEhB,SAAS,CAAC;AACzB,CAAC,CAAC;AAEFa,IAAI,CAACU,QAAQ,CAAC,uBAAuB,CAAC,CAACP,KAAK,CAAEQ,MAAM,IAAK;EACvD,MAAMvB,EAAE,GAAGuB,MAAM,CAACC,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC;EACtC3B,SAAS,GAAGA,SAAS,CAAC4B,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAAC5B,EAAE,KAAKA,EAAE,CAAC;EAChD,OAAO,CAAC,GAAG,CAAC;AACd,CAAC,CAAC;AAGFY,IAAI,CAACE,MAAM,CAAC,mBAAmB,CAAC,CAACC,KAAK,CAAEQ,MAAM,IAAK;EACjD,MAAM;IAAEM;EAAQ,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACR,MAAM,CAACS,IAAI,CAAC;EAC3C,MAAMC,KAAK,GAAGJ,OAAO,CAACK,WAAW,CAAC,CAAC;EAEnC,IAAI3B,OAAO,GAAG,gCAAgC;EAC9C,MAAME,OAAO,GAAG,EAAE;EAElB,IAAIwB,KAAK,CAACE,QAAQ,CAAC,YAAY,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,YAAY,CAAC,EAAE;IAChE5B,OAAO,IACL,8HAA8H;IAChIE,OAAO,CAACW,IAAI,CAAC,gCAAgC,CAAC;EAChD,CAAC,MAAM,IAAIa,KAAK,CAACE,QAAQ,CAAC,WAAW,CAAC,EAAE;IACtC5B,OAAO,IAAI,gFAAgF;IAC3FE,OAAO,CAACW,IAAI,CAAC,gCAAgC,CAAC;EAChD,CAAC,MAAM,IAAIa,KAAK,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACnC5B,OAAO,IAAI,0CAA0C;IACrDE,OAAO,CAACW,IAAI,CAAC,gCAAgC,CAAC;EAChD,CAAC,MAAM,IAAIa,KAAK,CAACE,QAAQ,CAAC,KAAK,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,QAAQ,CAAC,EAAE;IAC5D5B,OAAO,IAAI,gDAAgD;IAC3DE,OAAO,CAACW,IAAI,CAAC,gCAAgC,CAAC;EAChD,CAAC,MAAM,IAAIa,KAAK,CAACE,QAAQ,CAAC,WAAW,CAAC,IAAIF,KAAK,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;IAChE5B,OAAO,IAAI,6EAA6E;IACxFE,OAAO,CAACW,IAAI,CAAC,gCAAgC,CAAC;EAChD,CAAC,MAAM;IACLb,OAAO,IAAI,mEAAmE;IAC9EE,OAAO,CAACW,IAAI,CAAC,wCAAwC,CAAC;EACxD;EAEA,MAAMgB,WAAW,GAAG;IAClBpC,EAAE,EAAEiB,MAAM,CAACN,SAAS,EAAE,CAAC;IACvBT,IAAI,EAAE,MAAM;IACZK,OAAO,EAAEsB,OAAO;IAChBrB,SAAS,EAAE,IAAIU,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EACpC,CAAC;EAED,MAAMkB,aAAa,GAAG;IACpBrC,EAAE,EAAEiB,MAAM,CAACN,SAAS,EAAE,CAAC;IACvBT,IAAI,EAAE,QAAQ;IACdK,OAAO;IACPC,SAAS,EAAE,IAAIU,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCV;EACF,CAAC;EAEDH,WAAW,CAACc,IAAI,CAACgB,WAAW,EAAEC,aAAa,CAAC;EAE5C,OAAO,CAAC,GAAG,EAAEA,aAAa,CAAC;AAC7B,CAAC,CAAC;AAEFzB,IAAI,CAACS,KAAK,CAAC,mBAAmB,CAAC,CAACN,KAAK,CAAC,MAAM;EAC1C,OAAO,CAAC,GAAG,EAAET,WAAW,CAAC;AAC3B,CAAC,CAAC;AAEF,eAAeM,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}